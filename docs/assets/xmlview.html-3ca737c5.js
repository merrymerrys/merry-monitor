import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as p,a as d,w as i,d as s,b as n,f as t}from"./app-3756e335.js";const h="/merry-monitor/assets/channel-f4b6e371.png",g="/merry-monitor/assets/other-54814592.png",_="/merry-monitor/assets/explain-a2ec5c15.png",m="/merry-monitor/assets/sync-d1a411a2.png",v={},f=s('<div class="hint-container info"><p class="hint-container-title">配置可视化</p><p>长久以来，测试人员修改XML配置文件只能通过文本编辑器。这种方式不仅效率低，且出错率还高。非常不适合开发人员之外、不熟悉标签定义的其他人员使用。</p><p>因此，一个可视化的配置界面，不仅必要也非常重要。</p><p>V2.0 版本的XML配置页面，参考了JSON配置页面。（先有的Web版本的JSON配置页面）</p><p>相比之前的版本，UI操作逻辑与XML的解析转存，按照Web版本的MVVM模式进行了重写，利用数据的双向绑定大幅优化了内存消耗。</p></div><h2 id="页面标注" tabindex="-1"><a class="header-anchor" href="#页面标注" aria-hidden="true">#</a> 页面标注</h2><p>配置文件的加载方式，提供了本地文件加载与Http网络加载两种方式。</p><p><strong>其中，Http加载方式需要设备提供Web服务支持。</strong></p>',4),u=t("figure",null,[t("img",{src:h,alt:"",tabindex:"0",loading:"lazy"}),t("figcaption")],-1),b=t("figure",null,[t("img",{src:g,alt:"",tabindex:"0",loading:"lazy"}),t("figcaption")],-1),x=t("figure",null,[t("img",{src:_,alt:"",tabindex:"0",loading:"lazy"}),t("figcaption")],-1),y=s('<h2 id="通道配置" tabindex="-1"><a class="header-anchor" href="#通道配置" aria-hidden="true">#</a> 通道配置</h2><p>点击左侧通道按钮，中央区域的配置界面将切换到对应的通道内容。</p><p>从说明文档中可以看到，报警类型的开关有七种不同的字段。在V2.0版本，已将这七种不同的字段合并为一个报警类型的下拉框。</p><p>这意味着这七种报警类型中只能选择其中一个。如果需要全部关闭，可选择不报警。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>下载XML文件前，你必须确保已经加载了一个 <code>settings.xml</code> 文件，应用程序需要使用模板文件以确保不会遗漏那些 <strong>你正在使用，但又不需要可视化</strong> 的标签。</p><p>例如：<code>&lt;copyrights&gt;&lt;/copyrights&gt;</code>、<code>&lt;version&gt;&lt;/version&gt;</code> 标签等。</p></div><h2 id="同步模式" tabindex="-1"><a class="header-anchor" href="#同步模式" aria-hidden="true">#</a> 同步模式</h2><p>有时候，我们需要对部分配置内容同时更新到多个不同的通道。</p><p>例如：当我们有一个需要对通道1-16的灵敏度，修改为同一个值的场景。如果我们在通道配置页下进行修改，则需要打开1-16通道的配置内容，分别进行修改。</p><p>这不仅步骤繁琐，且在操作过程中容易遗漏部分通道的修改。</p><p>同步模式就是为这类应用场景推出的解决方案。</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>继续使用刚才的栗子。在同步模式的情况下，修改灵敏度的步骤如下：</p><div class="hint-container tip"><p class="hint-container-title">提示</p><ol><li>打开配置项前的使能开关。(这里打开的是灵敏度的使能开关)</li><li>修改灵敏度的值。</li><li>点击左侧按钮，选中需要同步的通道。(这里提供了一组快速选中的按钮组)</li><li>点击同步修改，将勾选的配置内容同步至所有选中的通道。</li><li>回到通道配置页，查看修改情况。</li></ol></div><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h2><div class="hint-container warning"><p class="hint-container-title">注意</p><p>由于XML标签包裹下的数据，最终都会转换为字符串，而项目配置的情况又让人出乎意料。<br> 因此，早期为配置项提供的表单校验，目前已全部取消。</p><p>你需要为你自己填写的配置项，<strong>考虑其数据合法性</strong>。应用程序不再提供表单检验服务。</p></div>',15);function V(M,w){const o=c("Tabs");return l(),p("div",null,[f,d(o,{id:"23",data:[{id:"通道配置"},{id:"其他配置"},{id:"说明文档"}]},{title0:i(({value:e,isActive:a})=>[n("通道配置")]),title1:i(({value:e,isActive:a})=>[n("其他配置")]),title2:i(({value:e,isActive:a})=>[n("说明文档")]),tab0:i(({value:e,isActive:a})=>[u]),tab1:i(({value:e,isActive:a})=>[b]),tab2:i(({value:e,isActive:a})=>[x]),_:1}),y])}const L=r(v,[["render",V],["__file","xmlview.html.vue"]]);export{L as default};
